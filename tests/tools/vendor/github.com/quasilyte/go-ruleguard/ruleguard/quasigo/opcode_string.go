// Code generated by "stringer -type=opcode -trimprefix=op"; DO NOT EDIT.

package quasigo

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[opInvalid-0]
	_ = x[opPop-1]
	_ = x[opDup-2]
	_ = x[opPushParam-3]
	_ = x[opPushIntParam-4]
	_ = x[opPushLocal-5]
	_ = x[opPushIntLocal-6]
	_ = x[opPushFalse-7]
	_ = x[opPushTrue-8]
	_ = x[opPushConst-9]
	_ = x[opPushIntConst-10]
	_ = x[opConvIntToIface-11]
	_ = x[opSetLocal-12]
	_ = x[opSetIntLocal-13]
	_ = x[opIncLocal-14]
	_ = x[opDecLocal-15]
	_ = x[opReturnTop-16]
	_ = x[opReturnIntTop-17]
	_ = x[opReturnFalse-18]
	_ = x[opReturnTrue-19]
	_ = x[opReturn-20]
	_ = x[opJump-21]
	_ = x[opJumpFalse-22]
	_ = x[opJumpTrue-23]
	_ = x[opSetVariadicLen-24]
	_ = x[opCallNative-25]
	_ = x[opCall-26]
	_ = x[opIntCall-27]
	_ = x[opVoidCall-28]
	_ = x[opIsNil-29]
	_ = x[opIsNotNil-30]
	_ = x[opNot-31]
	_ = x[opEqInt-32]
	_ = x[opNotEqInt-33]
	_ = x[opGtInt-34]
	_ = x[opGtEqInt-35]
	_ = x[opLtInt-36]
	_ = x[opLtEqInt-37]
	_ = x[opEqString-38]
	_ = x[opNotEqString-39]
	_ = x[opConcat-40]
	_ = x[opAdd-41]
	_ = x[opSub-42]
	_ = x[opStringSlice-43]
	_ = x[opStringSliceFrom-44]
	_ = x[opStringSliceTo-45]
	_ = x[opStringLen-46]
}

const _opcode_name = "InvalidPopDupPushParamPushIntParamPushLocalPushIntLocalPushFalsePushTruePushConstPushIntConstConvIntToIfaceSetLocalSetIntLocalIncLocalDecLocalReturnTopReturnIntTopReturnFalseReturnTrueReturnJumpJumpFalseJumpTrueSetVariadicLenCallNativeCallIntCallVoidCallIsNilIsNotNilNotEqIntNotEqIntGtIntGtEqIntLtIntLtEqIntEqStringNotEqStringConcatAddSubStringSliceStringSliceFromStringSliceToStringLen"

var _opcode_index = [...]uint16{0, 7, 10, 13, 22, 34, 43, 55, 64, 72, 81, 93, 107, 115, 126, 134, 142, 151, 163, 174, 184, 190, 194, 203, 211, 225, 235, 239, 246, 254, 259, 267, 270, 275, 283, 288, 295, 300, 307, 315, 326, 332, 335, 338, 349, 364, 377, 386}

func (i opcode) String() string {
	if i >= opcode(len(_opcode_index)-1) {
		return "opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _opcode_name[_opcode_index[i]:_opcode_index[i+1]]
}
